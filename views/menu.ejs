<head>
    <link rel="icon" href="/images/iconLogo.png" />
</head>
<section>
    <div class="top-menu">
        <div class="left-section">
            <img id="logo" src="/images/logo.png" alt="">
            <span class="menu-text">Clips Vault</span>
        </div>
        <div class="middle-section">
            <a href="/" class="menu-link">Dashboard</a>
            <a href="/allclips" class="menu-link">Clips</a>
            <!-- <a href="/queue" class="menu-link">Queue</a> -->
            <a href="settings" class="menu-link">Settings</a>
        </div>
        <div class="right-section">
            <div class="notification-container">
                <div class="notification-bell">
                    <i class="fa fa-bell"></i>
                    <span class="notification-count">0</span>
                </div>
                <ul class="notifications">
                    <button id="ack-btn">Acknowledge All</button>
                </ul>
            </div>
            <div class="profile-settings">
                <% if (userData) { %>
                    <img src="<%= userData.profile_image_url %>" alt="" />
                    <% } else { %>
                        <img src="/images/blank_logo.jpg" alt="../public/images/blank_logo.jpg" />
                        <% } %>
            </div>
        </div>
    </div>
</section>
<script>
    const acknowledgeButton = document.getElementById('ack-btn');
    const notificationCount = document.querySelector('.notification-count');
    const notificationContainer = document.querySelector('.notification-container');
    const notifications = document.querySelector('.notifications');
    let hideTimeout;

    // Register event listeners
    acknowledgeButton.addEventListener('click', () => {
        acknowledgeAll();
    });

    notificationContainer.addEventListener('mouseleave', () => {
        hideTimeout = setTimeout(() => {
            notifications.style.opacity = '0';
            setTimeout(() => {
                notifications.style.display = 'none';
            }, 900);
        }, 1100);
    });

    notificationContainer.addEventListener('mouseenter', () => {
        notifications.style.display = 'flex';
        notifications.style.opacity = '1';
        clearTimeout(hideTimeout);
    });

    // Function to format date
    function formatDate(dateString) {
        const options = { month: 'short', day: 'numeric', year: 'numeric' };
        const date = new Date(dateString);
        return date.toLocaleDateString(undefined, options);
    }

    // Function to format time
    function formatTime(timeString) {
        const options = { hour: 'numeric', minute: 'numeric' };
        const time = new Date(timeString);
        return time.toLocaleTimeString(undefined, options).replace(/\s/g, '').toUpperCase();
    }

    // Function to increase notification count
    function increaseNotificationCount() {
        if (notificationCount.style.display === 'none') {
            notificationCount.style.display = 'block';
        }
        const count = parseInt(notificationCount.textContent);
        notificationCount.textContent = count + 1;
        notificationCount.style.display = 'block';
    }

    // Function to create notification item
    function createNotificationItem(notification) {
        console.log(notification);
        const { _id, notification: text, read, date, level } = notification;
        const notificationItem = document.createElement('div');
        notificationItem.classList.add('notification-item');
        notificationItem.setAttribute('data-id', _id);
        const notificationElement = document.createElement('li');
        notificationElement.classList.add('noti');
        notificationElement.textContent = text;
        const notificationDateTime = document.createElement('div');
        const dateElement = document.createElement('span');
        dateElement.classList.add('noti-date');
        dateElement.textContent = formatDate(date);
        const timeElement = document.createElement('span');
        timeElement.classList.add('noti-time');
        timeElement.textContent = formatTime(date);
        notificationDateTime.appendChild(dateElement);
        notificationDateTime.appendChild(timeElement);
        if (read) {
            notificationItem.classList.add('read');
        }
        notificationItem.appendChild(notificationElement);
        notificationItem.appendChild(notificationDateTime);

        return notificationItem;
    }

    // Function to delete notification
    function deleteNotification(notificationId) {
        const requestOptions = {
            method: 'DELETE',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id: notificationId })
        };
        fetch('/api/notifications', requestOptions)
            .then(response => response.json())
            .then(data => {
                console.log('Notification deleted successfully:', data);
            })
            .catch(error => {
                console.error('Error deleting notification:', error);
            });
    }

    // Function to acknowledge all notifications
    function acknowledgeAll() {
        console.log('Acknowledging all notifications');
        const requestOptions = {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id: 'all' })
        };

        fetch('/api/notifications', requestOptions)
            .then(response => response.json())
            .then(data => {
                console.log('Notifications acknowledged successfully:', data);
                const notificationItems = document.querySelectorAll('.notification-item');
                notificationItems.forEach(item => {
                    item.classList.add('read');
                });
            })
            .catch(error => {
                console.error('Error acknowledging notifications:', error);
            });
    }

    // Function to get all notifications
    async function getNotifications() {
        fetch('/api/notifications')
            .then(response => response.json())
            .then(data => {
                const notificationsContainer = document.querySelector('.notifications');
                if (data.length > 0) {
                    let notificationCount = 0;
                    for (let i = 0; i < data.length; i++) {
                        if (!data[i].read) {
                            increaseNotificationCount();
                        }
                    }
                } else {
                    notificationCount.style.display = 'none';
                }

                data.forEach(notification => {
                    const notificationItem = createNotificationItem(notification);
                    notificationsContainer.appendChild(notificationItem);
                });
            })
            .catch(error => {
                console.error('Error fetching notifications:', error);
            });
    }

    window.addEventListener('load', () => {
        getNotifications();
    });
</script>