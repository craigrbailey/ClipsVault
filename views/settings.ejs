<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Settings</title>
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.10.1/css/all.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
        integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="/css/base.css">
    <link rel="stylesheet" href="/css/settings.css">
</head>

<body>
    <%- include('menu.ejs') %>
        <div class="main-interface">
            <div class="settings-container">
                <div class="settings" id="general-settings">
                    <h2>General</h2>
                    <span>Configure general settings for the application</span>
                    <div class="setting" id="live-required">
                        <div>
                            <h4>Live Required</h4>
                            <span>Does OBS need to be streaming for the application to track the stream</span>
                        </div>
                        <label class="switch" id="liveRequiredSwitch">
                            <input id="liveRequired" type="checkbox" <%=liveRequired ? 'checked' : '' %>>
                            <span class="slider"></span>
                        </label>
                    </div>
                    <div class="maintenace-time">
                        <div>
                            <h4>Maintenace Time</h4>
                            <span>Specifiy the time the application performs maintenace</span>
                        </div>
                        <div id="cleanup-time">
                            <select id="maintenance-time">
                                <option value="0000">Midnight</option>
                                <option value="0100">1 AM</option>
                                <option value="0200">2 AM</option>
                                <option value="0300">3 AM</option>
                                <option value="0400">4 AM</option>
                                <option value="0500">5 AM</option>
                                <option value="0600">6 AM</option>
                                <option value="0700">7 AM</option>
                                <option value="0800">8 AM</option>
                                <option value="0900">9 AM</option>
                                <option value="1000">10 AM</option>
                                <option value="1100">11 AM</option>
                                <option value="1200">Noon</option>
                                <option value="1300">1 PM</option>
                                <option value="1400">2 PM</option>
                                <option value="1500">3 PM</option>
                                <option value="1600">4 PM</option>
                                <option value="1700">5 PM</option>
                                <option value="1800">6 PM</option>
                                <option value="1900">7 PM</option>
                                <option value="2000">8 PM</option>
                                <option value="2100">9 PM</option>
                                <option value="2200">10 PM</option>
                                <option value="2300">11 PM</option>
                            </select>
                        </div>
                    </div>
                    <div class="setting" id="platform">
                        <div>
                            <h4>Platform</h4>
                            <span>Specifiy which platform you stream on</span>
                        </div>
                        <select id="platform-select">
                            <option value="twitch">Twitch</option>
                            <option value="youtube">YouTube</option>
                        </select>
                    </div>
                    <div class="setting api-key-container" id="api-key">
                        <div>
                            <h4>API Key</h4>
                            <span>API key to make requests to the application</span>
                        </div>
                        <div class="api-key-input">
                            <input type="text" id="api-key-input" value=<%=apiKey %> readonly>
                            <button id="new-api-key">
                                <i class="fa-solid fa-sync"></i>
                            </button>
                            <button id="copy-api-key-button">
                                Copy
                            </button>
                        </div>
                    </div>
                </div>
                <div class="settings" id="obs-settings">
                    <h2>OBS Connection</h2>
                    <span>Connection To OBS or Streamlabs OBS is WebSocket Server</span>
                    <form id="obs-settings-form">
                        <label for="host">Host:</label>
                        <input class="settings-input" type="text" id="host" name="host"
                            value="<%= obsSettings.ip !== null ? obsSettings.ip : '' %>"><br><br>
                        <label for="port">Port:</label>
                        <input class="settings-input" type="text" id="port" name="port"
                            value="<%= obsSettings.port !== null ? obsSettings.port : '' %>"><br><br>
                        <label for="password">Password:</label>
                        <input class="settings-input" type="password" id="password" name="password"
                            value="<%= obsSettings.password !== null ? obsSettings.password : '' %>"><br><br>
                        <button id="obs-button" type="submit">Connect</button>
                    </form>
                </div>
                <div class="settings" id="notification-settings">
                    <h2>Notifications</h2>
                    <span>Configure Notification Settings</span>
                    <div id="discord-settings">
                        <div>
                            <h3 class="notification-app">Discord</h3>
                            <label class="switch" id="discord-toggle">
                                <input type="checkbox" <%=discordStatus ? 'checked' : '' %>>
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                    <% if (discordStatus) { %>
                        <div>
                            <form id="discord-form">
                                <h3 class="notification-app">Discord Webhook</h3>
                                <input class="settings-input" type="text" id="webhook" name="webhook"
                                    placeholder="Paste webhook here..." value="<%= discordWebhookURL %>"><br><br>
                                <button id="submit-button" type="submit">Submit</button>
                            </form>
                        </div>
                        <% } %>
                            <div>
                                <div id="gmail-settings">
                                    <h3 class="notification-app">Gmail</h3>
                                    <label class="switch" id="gmail-toggle">
                                        <input type="checkbox" <%=gmailToggle ? 'checked' : '' %>>
                                        <span class="slider"></span>
                                    </label>
                                </div>
                            </div>
                            <div class="notification-options">
                                <h3>Notification Options</h3>
                                <i class="fa-solid fa-chevron-up" id="noti-options-toggler"></i>
                                <span>Adjust which notificaions you wish to receive</span>
                                <div class="noti-option">
                                    <div class="options-desc">
                                        <h4>Clip Added</h4>
                                        <span>Receive a notificaion when a clip is added</span>
                                    </div>
                                    <label class="switch" id="new-clip-noti">
                                        <input id="liveRequired" type="checkbox" <%=liveRequired ? 'checked' : '' %>>
                                        <span class="slider"></span>
                                    </label>
                                </div>
                                <div class="noti-option">
                                    <div class="options-desc">
                                        <h4>Clip Removed</h4>
                                        <span>Receive a notificaion when a clip is manually removed</span>
                                    </div>
                                    <label class="switch" id="clip-removed-noti">
                                        <input id="liveRequired" type="checkbox" <%=liveRequired ? 'checked' : '' %>>
                                        <span class="slider"></span>
                                    </label>
                                </div>
                                <div class="noti-option">
                                    <div class="options-desc">
                                        <h4>Stream Added</h4>
                                        <span>Receive a notificaion when a new stream is added</span>
                                    </div>
                                    <label class="switch" id="new-stream-noti">
                                        <input id="liveRequired" type="checkbox" <%=liveRequired ? 'checked' : '' %>>
                                        <span class="slider"></span>
                                    </label>
                                </div>
                                <div class="noti-option">
                                    <div class="options-desc">
                                        <h4>Stream Removed</h4>
                                        <span>Receive a notificaion when a new stream is manually removed</span>
                                    </div>
                                    <label class="switch" id="stream-removed-noti">
                                        <input id="liveRequired" type="checkbox" <%=liveRequired ? 'checked' : '' %>>
                                        <span class="slider"></span>
                                    </label>
                                </div>
                                <div class="noti-option">
                                    <div class="options-desc">
                                        <h4>Clip archived</h4>
                                        <span>Receive a notificaion when a clip is archived</span>
                                    </div>
                                    <label class="switch" id="clip-archived-noti">
                                        <input id="liveRequired" type="checkbox" <%=liveRequired ? 'checked' : '' %>>
                                        <span class="slider"></span>
                                    </label>
                                </div>
                                <div class="noti-option">
                                    <div class="options-desc">
                                        <h4>Maintenace Complete</h4>
                                        <span>Receive a notificaion when maintenace is completed</span>
                                    </div>
                                    <label class="switch" id="maintenace-noti">
                                        <input id="liveRequired" type="checkbox" <%=liveRequired ? 'checked' : '' %>>
                                        <span class="slider"></span>
                                    </label>
                                </div>
                            </div>
                </div>
                <div class="settings">
                    <h2>Support The Project</h2>
                    <span>Consider supporting the project</span>
                    <div>
                    </div>
                </div>
            </div>
        </div>
        </div>
        <script src="/js/base.js"></script>
        <script src="/js/settings.js"></script>
        <script>    var currentPage = window.location.href;
            var menuLinks = document.getElementsByClassName('menu-link');
            for (var i = 0; i < menuLinks.length; i++) {
                var link = menuLinks[i];
                if (currentPage.includes('settings') && link.textContent === 'Settings') {
                    link.classList.add('selected');
                }
            }
            const copyApiKeyButton = document.getElementById('copy-api-key-button');
            const discordForm = document.getElementById('discord-form');
            const webhookInput = document.getElementById('webhook');
            const serverapiKey = '<%= serverKey %>';
            const newApiKeyButton = document.getElementById('new-api-key');
            const discordToggle = document.getElementById('discord-toggle');
            const obsSettingsForm = document.getElementById('obs-settings-form');
            const liveRequiredSwitch = document.getElementById('liveRequiredSwitch');
            const liveRequiredCheckbox = document.getElementById('liveRequired');
            const cleanupTimeSelect = document.getElementById('maintenance-time');
            const platformSelect = document.getElementById('platform-select');
            const notiOptionsToggle = document.getElementById('noti-options-toggler');
            const gmailToggle = document.getElementById('gmail-toggle');

            gmailToggle.addEventListener('change', () => {
                const isChecked = gmailToggle.querySelector('input').checked;
                const body = {
                    setting: 'gmailToggle',
                    value: isChecked,
                };
                fetch('/api/settings', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(body),
                })
                    .then(response => {
                        if (response.ok) {
                            console.log('Toggle request sent successfully.');
                        } else {
                            console.error('Toggle request failed.');
                        }
                    })
                    .catch(error => {
                        console.error('Toggle request error:', error);
                    });
            });

            notiOptionsToggle.addEventListener('click', () => {
                const notiOptions = document.querySelectorAll('.noti-option');
                notiOptionsToggle.style.transform = notiOptionsToggle.style.transform === 'rotate(180deg)' ? 'rotate(0deg)' : 'rotate(180deg)';
                notiOptions.forEach((option) => {
                    option.style.display = option.style.display === 'flex' ? 'none' : 'flex';
                });
            });

            platformSelect.addEventListener('change', () => {
                const selectedValue = platformSelect.value;
                console.log(selectedValue);
                const settings = {
                    setting: 'platform',
                    value: selectedValue
                };
                fetch('/api/settings', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(settings)
                })
                    .then(response => {
                        if (response.ok) {
                            console.log('Platform setting updated successfully');
                        } else {
                            console.error('Failed to update Platform setting');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
            });

            cleanupTimeSelect.addEventListener('change', () => {
                const selectedValue = cleanupTimeSelect.value;
                console.log(selectedValue);
                const settings = {
                    setting: 'maintenanceTime',
                    value: selectedValue
                };
                fetch('/api/settings', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(settings)
                })
                    .then(response => {
                        if (response.ok) {
                            console.log('Cleanup Time setting updated successfully');
                        } else {
                            console.error('Failed to update Cleanup Time setting');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
            });

            liveRequiredSwitch.addEventListener('change', () => {
                const value = liveRequiredCheckbox.checked;
                const settings = {
                    setting: 'liveRequired',
                    value: value
                };
                fetch('/api/settings', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(settings)
                })
                    .then(response => {
                        if (response.ok) {
                            console.log('Live Required setting updated successfully');
                        } else {
                            console.error('Failed to update Live Required setting');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
            });

            obsSettingsForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const hostInput = document.getElementById('host');
                const portInput = document.getElementById('port');
                const host = hostInput.value.trim();
                const port = portInput.value.trim();
                const validHost = validateHost(host);
                const validPort = validatePort(port);
                if (validHost && validPort) {
                    const settings = {
                        host: host,
                        port: port,
                        password: document.getElementById('password').value
                    };
                    const body = {
                        setting: 'obsSettings',
                        value: settings
                    };
                    fetch('/api/settings', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(body)
                    })
                        .then(response => {
                            if (response.ok) {
                                console.log('Settings saved successfully');
                            } else {
                                console.error('Failed to save settings');
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                        });
                }
            });

            function validateHost(host) {
                const ipPattern = /^(localhost|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})$/;
                return ipPattern.test(host);
            }

            function validatePort(port) {
                return !isNaN(port);
            }

            discordToggle.addEventListener('change', () => {
                const isChecked = discordToggle.querySelector('input').checked;
                const body = {
                    setting: 'discordToggle',
                    value: isChecked,
                };
                fetch('/api/settings', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(body),
                })
                    .then(response => {
                        if (response.ok) {
                            console.log('Toggle request sent successfully.');
                            if (isChecked) {
                                document.getElementById('discord-form').style.display = 'block';
                            } else {
                                document.getElementById('discord-form').style.display = 'none';
                            }
                            console.log('Toggle request sent successfully.');
                        } else {
                            console.error('Toggle request failed.');
                        }
                    })
                    .catch(error => {
                        console.error('Toggle request error:', error);
                    });
            });

            newApiKeyButton.addEventListener('click', updateApiKey);

            discordForm.addEventListener('submit', (event) => {
                event.preventDefault();
                const webhookUrl = webhookInput.value;
                if (isValidUrl(webhookUrl)) {
                    const body = {
                        setting: 'discord',
                        value: webhookUrl,
                    };
                    fetch('/settings', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(body),
                    })
                        .then((response) => response.json())
                        .then((data) => {
                            console.log(data);
                        })
                        .catch((error) => {
                            console.error('Error:', error);
                        });
                } else {
                    console.log('Invalid webhook URL');
                }
            });
            copyApiKeyButton.addEventListener('click', copyApiKey);
            function copyApiKey() {
                const apiKeyInput = document.getElementById('api-key-input');
                apiKeyInput.select();
                document.execCommand('copy');
                copyApiKeyButton.classList.add('copied');
                setTimeout(() => {
                    copyApiKeyButton.classList.remove('copied');
                }, 1000);
            }

            function isValidUrl(url) {
                const urlPattern = /^(https?:\/\/)?([\w.-]+)\.([a-zA-Z]{2,6})(\/[\w.-]*)*\/?$/;
                return urlPattern.test(url);
            }

            async function updateApiKey(apiKey) {
                try {
                    const response = await fetch('/api/settings', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'x-api-key': serverapiKey,
                        },
                        body: JSON.stringify({ setting: 'apikey' })
                    });

                    if (response.ok) {
                        const data = await response.json();
                        const apiKeyInput = document.getElementById('api-key-input');
                        apiKeyInput.value = data.apiKey;
                        console.log('API key updated successfully');
                    } else {
                        console.error('Failed to update API key');
                    }
                } catch (error) {
                    console.error('Error updating API key:', error);
                }
            }
        </script>
</body>

</html>