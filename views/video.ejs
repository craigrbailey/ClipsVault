<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Clips Vault</title>
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.10.1/css/all.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw=="
    crossorigin="anonymous" referrerpolicy="no-referrer" />
  <link rel="stylesheet" href="/css/base.css" />
  <link rel="stylesheet" href="/css/video.css">
  <link rel="icon" href="/images/iconLogo.png" />
</head>

<body>
  <%- include('menu.ejs') %>
    <div class="main-interface">
      <div class="video-interface">
        <div class="video-info">
          <input id="videoCategory" type="text" value="<%= videoData.category || '' %>" disabled>
          <div id="suggestions"></div>
          <a id="video-date" href="/stream?streamId=<%= videoData.stream_id %>">
            <span id="video-date">
              <%= videoData.date %>
            </span>
          </a>
        </div>
        <div class="video-actions">
          <button class="action-button" id="delete-video" title="Delete Video">
            <i class="fa-solid fa-trash"></i>
          </button>
          <a class="action-button" id="download-video" title="Download Video" href="<%= videoData.file %>" download>
            <button class="action-button" id="download-video">
              <i class="fa-solid fa-download"></i>
            </button>
          </a>
          <% if (!videoData.favorite) { %>
            <button class="action-button favorite-button" title="Favorite Video" id="favorite-video">
              <i class="fa-regular fa-heart"></i>
            </button>
            <% } else { %>
              <button class="action-button favorite-button" title="Unfavorite Video" id="unfavorite-video">
                <i class="fa-solid fa-heart"></i>
              </button>
              <% } %>
                <!-- <button class="action-button" title="Add To The Queue" id="addQueue">
                  <i class="fa-solid fa-list-ol"></i>
                </button> -->
                <button class="action-button" id="edit-video" title="Edit Video Details">
                  <i class="fa-solid fa-pen-to-square"></i>
                </button>
        </div>
        <div class="video-container">
          <video id="video" src="<%= videoData.file %>" controls autoplay></video>
          <img class="clip-image" id="clip-image" src="<%= videoData.categoryImg %>" alt="">
        </div>
        <span id="label">Tags</span>
        <div class="video-tags-container">
          <div class="tag-list" id="tag-list">
            <% for (let i=0; i < videoData.tags.length; i++) { %>
              <span>
                <%= videoData.tags[i] %><i class="fa-solid fa-circle-xmark"></i>
              </span>
              <% } %>
          </div>
          <form class="tag-form">
            <i class="fa-solid fa-tags"></i>
            <input type="text" id="tag-input" placeholder="Add a tag">
          </form>
        </div>
      </div>
    </div>
    </div>
    </div>
    <script src="/js/base.js"></script>gory
    <script>
      const urlParams = new URLSearchParams(window.location.search);
      const apiKey = '<%= apiKey %>';
      const tagInput = document.getElementById('tag-input');
      const tagList = document.getElementById('tag-list');
      const videoId = urlParams.get('videoId');
      const streamId = urlParams.get('streamId');
      const favoriteButton = document.querySelector('.favorite-button');
      const deleteButton = document.getElementById('delete-video');
      const addButton = document.getElementById('add-queue');
      const video = document.querySelector('video-container video');
      const editVideobtn = document.getElementById('edit-video');
      const videoCategory = document.getElementById('videoCategory');
      let isFavorite = '<%= videoData.favorite %>';
      let editMode = false;
      let updatedImg = false;

      deleteButton.addEventListener('click', handleDeleteVideo);

      // Function to add a video to the queue
      async function addVideoToQueue(event) {
        event.preventDefault();
        // const videoId = '<%= videoData.id %>';
        const response = await fetch('/api/queue', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': apiKey
          },
          body: JSON.stringify({
            videoId: videoId
          })
        });
        console.log(response);
        if (!response.ok) {
          console.log('Error updating stream category');
          return;
        } else {
          console.log('Success updating stream category');
          return;
        }
      }

      // Function to update the category of the video
      async function updateStream() {
        const streamCategory = document.getElementById('videoCategory').value;
        const response = await fetch('/api/clip', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': apiKey
          },
          body: JSON.stringify({
            videoId,
            videoCategory,
          })
        });
        if (!response.ok) {
          console.log('Error updating stream category');
          return;
        } else {
          console.log('Success updating stream category');
          return;
        }
      }

      // Function to get the box art for a game
      async function getBoxArt(gameName) {
        if (updatedImg) {
          return;
        };
        console.log(gameName);
        const response = await fetch('/api/categorysearch', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            boxArt: true,
            category: gameName
          })
        })
        if (!response.ok) {
          console.log('Error getting box art');
          return;
        } else {
          updatedImg = true;
          const data = await response.json();
          document.getElementById('clip-image').src = data;
          return data;
        }
      }

      // Function to favorite a video
      favoriteButton.addEventListener('click', () => {
        console.log('isFavorite', isFavorite)
        if (isFavorite) {
          console.log('unfavoriting');
          fetch('/api/favorite', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'x-api-key': apiKey
            },
            body: JSON.stringify({
              favoriteType: 'video',
              id: videoId,
              status: false
            })
          })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                favoriteButton.innerHTML = '<i class="fa-regular fa-heart"></i>';
                isFavorite = false;
                console.log(data.message);
              } else {
                console.error(data.error);
              }
            })
            .catch(error => {
              console.error('Error:', error);
            });
        } else {
          console.log('favoriting');
          fetch('/api/favorite', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'x-api-key': apiKey
            },
            body: JSON.stringify({
              favoriteType: 'video',
              id: videoId,
              status: true
            })
          })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                favoriteButton.innerHTML = '<i class="fa-solid fa-heart favorite"></i>';
                isFavorite = true;
                console.log(data.message);
              } else {
                console.error(data.error);
              }
            })
            .catch(error => {
              console.error('Error:', error);
            });
        }
      });

      // Function to add a tag to a video
      function addTagToVideo(event) {
        event.preventDefault();
        const newTag = tagInput.value.trim();
        if (newTag !== '') {
          const tagType = 'video';
          const id = videoId;

          fetch('/api/tags', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'x-api-key': apiKey
            },
            body: JSON.stringify({
              tagType: tagType,
              id: id,
              newTag: newTag
            })
          })
            .then(response => response.json())
            .then(data => {
              console.log(data);
              if (data.success) {
                const tagElement = document.createElement('span');
                const iconElement = document.createElement('i');
                iconElement.classList.add('fa-solid', 'fa-circle-xmark');
                tagElement.textContent = newTag;
                tagElement.addEventListener('click', function () {
                  removeTag(tagElement, newTag);
                });
                tagElement.appendChild(iconElement);
                tagList.appendChild(tagElement);
                tagInput.value = '';
              }
            })
            .catch(error => {
              console.error('Error adding tag:', error);
            });
        }
      }
      


          // Function to remove a tag from a video
          function removeTag(tagElement, tagToRemove) {
            fetch('/api/tags', {
              method: 'DELETE',
              headers: {
                'Content-Type': 'application/json',
                'x-api-key': apiKey
              },
              body: JSON.stringify({
                tagType: 'video',
                id: videoId,
                tagToRemove: tagToRemove
              })
            })
              .then(response => response.json())
              .then(data => {
                console.log(data);
                if (data.success) {
                  tagList.removeChild(tagElement);
                }
              })
              .catch(error => {
                console.error('Error removing tag:', error);
              });
          }

          function confirmDeleteVideo() {
            deleteButton.innerHTML = 'Confirm';
            deleteButton.addEventListener('click', handleDeleteVideo);
            deleteButton.classList.add('confirm-mode');
            deleteButton = setTimeout(() => {
              const i = document.createElement('i');
              i.classList.add('fa-solid', 'fa-trash');
              deleteButton.innerHTML = i.outerHTML;
              deleteButton.classList.remove('confirm-mode');
            }, 3000);
          }

          // Function to delete a video
          function deleteVideo() {
            fetch('/api/clip', {
              method: 'DELETE',
              headers: {
                'Content-Type': 'application/json',
                'x-api-key': apiKey
              },
              body: JSON.stringify({
                videoId: videoId
              })
            })
              .then(response => response.json())
              .then(data => {
                if (data.success) {
                  if (streamId) {
                    window.location.href = '/stream?streamId=' + streamId;
                  } else {
                    window.location.href = '/clips';
                  }
                } else {
                  console.error(data.error);
                }
              })
              .catch(error => {
                console.error('Error:', error);
              });
          }

          // Functio to delete a video
          function handleDeleteVideo() {
            if (deleteButton.classList.contains('confirm')) {
              deleteVideo();
              return;
            }
            deleteButton.innerText = 'Confirm';
            deleteButton.style.backgroundColor = 'red';
            deleteButton.classList.add('confirm');
            setTimeout(() => {
              if (deleteButton.classList.contains('confirm')) {
                const ele = document.createElement('i');
                ele.classList.add('fa-solid', 'fa-trash');
                deleteButton.innerText = '';
                deleteButton.style.backgroundColor = '';
                deleteButton.appendChild(ele);
                deleteButton.classList.remove('confirm');
              }
            }, 3000);
          }

          // Register event listeners
          deleteButton.addEventListener('click', handleDeleteVideo);
          tagList.addEventListener('click', function (event) {
            if (event.target.classList.contains('fa-circle-xmark')) {
              const tagElement = event.target.parentNode;
              const tagToRemove = tagElement.textContent.trim();
              removeTag(tagElement, tagToRemove);
            }
          });
          tagInput.addEventListener('keypress', function (event) {
            if (event.key === 'Enter') {
              addTagToVideo(event);
            }
          });
          editVideobtn.addEventListener('click', () => {
            if (editMode) {
              // Exiting edit mode
              videoCategory.disabled = true;
              videoCategory.style.border = 'none';
              getBoxArt(videoCategory.value);
            } else {
              // Entering edit mode
              videoCategory.disabled = false;
              videoCategory.style.border = 'solid 1px #dadada';
            }
            editMode = !editMode;
          });

          // Function to suggess titles based on user input
          var timeoutId;
          document.getElementById('videoCategory').addEventListener('input', function (e) {
            clearTimeout(timeoutId);
            timeoutId = setTimeout(function () {
              fetch('/api/categorysearch', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  category: e.target.value
                })
              })
                .then(response => response.json())
                .then(data => {
                  const gameImg = document.getElementById('catImg');
                  var suggestions = document.getElementById('suggestions');
                  suggestions.innerHTML = '';
                  data.forEach(game => {
                    var suggestion = document.createElement('div');
                    suggestion.className = "suggestion-item";
                    var gameArt = document.createElement('img');
                    gameArt.src = game.art;
                    gameArt.className = "game-art";
                    var gameName = document.createElement('span');
                    gameName.textContent = game.name;
                    gameName.className = "game-name";
                    suggestion.appendChild(gameArt);
                    suggestion.appendChild(gameName);
                    suggestions.appendChild(suggestion);
                    suggestion.addEventListener('click', function () {
                      document.getElementById('videoCategory').value = game.name;
                      suggestions.style.display = 'none';
                    });
                  });
                  if (data.length > 0) {
                    suggestions.style.display = 'block';
                  }
                })
                .catch(error => console.error('Error:', error));
            }, 500);
          });
    </script>
</body>

</html>