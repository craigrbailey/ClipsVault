<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Clips Vault</title>
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.10.1/css/all.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw=="
    crossorigin="anonymous" referrerpolicy="no-referrer" />
  <link rel="stylesheet" href="/css/base.css" />
  <link rel="stylesheet" href="/css/video.css">
</head>

<body>
  <%- include('menu.ejs') %>
    <div class="main-interface">
      <div class="video-interface">
        <div class="video-info">
          <span id="video-category">
            <%= videoData.category %>
          </span>
          <a id="video-date" href="/stream?streamId=<%= videoData.stream_id %>">
            <span id="video-date">
              <%= videoData.date %>
            </span>
          </a>
        </div>
        <div class="video-actions">
          <button class="action-button" id="delete-video">
            <i class="fa-solid fa-trash"></i>
          </button>
          <a class="action-button" id="download-video" href="<%= videoData.file %>" download>
            <button class="action-button" id="download-video">
              <i class="fa-solid fa-download"></i>
            </button>
          </a>
          <% if (!videoData.favorite) { %>
            <button class="action-button favorite-button" id="favorite-video">
              <i class="fa-regular fa-heart"></i>
            </button>
            <% } else { %>
              <button class="action-button favorite-button" id="unfavorite-video">
                <i class="fa-solid fa-heart"></i>
              </button>
              <% } %>
                <button class="action-button" id="add-queue">
                  <i class="fa-solid fa-list-ol"></i>
                </button>
        </div>
        <div class="video-container">
          <video id="video" src="<%= videoData.file %>" controls autoplay></video>
          <img class="clip-image" src="<%= videoData.categoryImg %>" alt="">
        </div>
        <span id="label">Tags</span>
        <div class="video-tags-container">
          <div class="tag-list" id="tag-list">
            <% for (let i=0; i < videoData.tags.length; i++) { %>
              <span>
                <%= videoData.tags[i] %><i class="fa-solid fa-circle-xmark"></i>
              </span>
              <% } %>
          </div>
          <form class="tag-form">
            <i class="fa-solid fa-tags"></i>
            <input type="text" id="tag-input" placeholder="Add a tag">
          </form>
        </div>
      </div>
    </div>
    </div>
    </div>
    <script src="/js/base.js"></script>
    <script>
      const urlParams = new URLSearchParams(window.location.search);
      const apiKey = '<%= apiKey %>';
      const tagInput = document.getElementById('tag-input');
      const tagList = document.getElementById('tag-list');
      const videoId = urlParams.get('videoId');
      const streamId = urlParams.get('streamId');
      const favoriteButton = document.querySelector('.favorite-button');
      const deleteButton = document.getElementById('delete-video');
      const addButton = document.getElementById('add-queue');
      let isFavorite = '<%= videoData.favorite %>';

      addButton.addEventListener('click', () => {
        console.log('Adding video to queue');
        const body = {
          id: videoId
        };
        fetch('/api/queue', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': apiKey
          },
          body: JSON.stringify(body)
        })
          .then(response => {
            if (response.ok) {
              console.log('Video added to queue successfully');
            } else {
              console.error('Failed to add video to queue');
            }
          })
          .catch(error => {
            console.error('Error:', error);
          });
      });

      favoriteButton.addEventListener('click', () => {
        if (isFavorite) {
          fetch('/api/favorite', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'x-api-key': apiKey
            },
            body: JSON.stringify({
              favoriteType: 'video',
              id: videoId,
              status: false
            })
          })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                favoriteButton.innerHTML = '<i class="fa-regular fa-heart"></i>';
                isFavorite = false;
                console.log(data.message);
              } else {
                console.error(data.error);
              }
            })
            .catch(error => {
              console.error('Error:', error);
            });
        } else {
          fetch('/api/favorite', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'x-api-key': apiKey
            },
            body: JSON.stringify({
              favoriteType: 'video',
              id: videoId,
              status: true
            })
          })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                favoriteButton.innerHTML = '<i class="fa-solid fa-heart favorite"></i>';
                isFavorite = true;
                console.log(data.message);
              } else {
                console.error(data.error);
              }
            })
            .catch(error => {
              console.error('Error:', error);
            });
        }
      });

      function addTagToVideo(event) {
        event.preventDefault();
        const newTag = tagInput.value.trim();
        if (newTag !== '') {
          const tagType = 'video';
          const id = videoId;

          fetch('/api/tags', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'x-api-key': apiKey
            },
            body: JSON.stringify({
              tagType: tagType,
              id: id,
              newTag: newTag
            })
          })
            .then(response => response.json())
            .then(data => {
              console.log(data);
              if (data.success) {
                const tagElement = document.createElement('span');
                const iconElement = document.createElement('i');
                iconElement.classList.add('fa-solid', 'fa-circle-xmark');
                tagElement.textContent = newTag;
                tagElement.addEventListener('click', function () {
                  removeTag(tagElement, newTag);
                });
                tagElement.appendChild(iconElement);
                tagList.appendChild(tagElement);
                tagInput.value = '';
              }
            })
            .catch(error => {
              console.error('Error adding tag:', error);
            });
        }
      }

      function removeTag(tagElement, tagToRemove) {
        fetch('/api/tags', {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': apiKey
          },
          body: JSON.stringify({
            tagType: 'video',
            id: videoId,
            tagToRemove: tagToRemove
          })
        })
          .then(response => response.json())
          .then(data => {
            console.log(data);
            if (data.success) {
              tagList.removeChild(tagElement);
            }
          })
          .catch(error => {
            console.error('Error removing tag:', error);
          });
      }

      function deleteVideo() {
        fetch('/api/deletevideo', {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': apiKey
          },
          body: JSON.stringify({
            id: videoId
          })
        })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              if (streamId) {
                window.location.href = '/stream?streamId=' + streamId;
              } else {
                window.location.href = '/';
              }
            } else {
              console.error(data.error);
            }
          })
          .catch(error => {
            console.error('Error:', error);
          });
      }

      function handleDeleteVideo() {
        if (deleteButton.classList.contains('confirm')) {
          deleteVideo();
          return;
        }
        deleteButton.innerText = 'Confirm';
        deleteButton.style.backgroundColor = 'red';
        deleteButton.classList.add('confirm');
        setTimeout(() => {
          if (deleteButton.classList.contains('confirm')) {
            const ele = document.createElement('i');
            ele.classList.add('fa-solid', 'fa-trash');
            deleteButton.innerText = '';
            deleteButton.style.backgroundColor = '';
            deleteButton.appendChild(ele);
            deleteButton.classList.remove('confirm');
          }
        }, 3000);
      }

      deleteButton.addEventListener('click', handleDeleteVideo);

      tagList.addEventListener('click', function (event) {
        if (event.target.classList.contains('fa-circle-xmark')) {
          const tagElement = event.target.parentNode;
          const tagToRemove = tagElement.textContent.trim();
          removeTag(tagElement, tagToRemove);
        }
      });

      tagInput.addEventListener('keypress', function (event) {
        if (event.key === 'Enter') {
          addTagToVideo(event);
        }
      });
    </script>
</body>

</html>