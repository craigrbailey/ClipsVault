<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Clips Vault</title>
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.10.1/css/all.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw=="
    crossorigin="anonymous" referrerpolicy="no-referrer" />
  <link rel="stylesheet" href="/css/base.css" />
  <link rel="stylesheet" href="/css/video.css">
</head>

<body>
  <section id="menu">
    <h1>Clips Vault</h1>

    <div class="items">
      <li><i class="fa-solid fa-gauge"></i><a href="/">Dashboard</a></li>
      <li>
        <i class="fa-solid fa-clapperboard"></i><a href="/clips">Clips</a>
      </li>
      <li>
        <i class="fa-solid fa-list-ol"></i><a href="#">Queue<span class="queue-notification"></span></a>
      </li>
    </div>
    <div class="progress-container">
      <div class="progress-bar-container">
        <div class="progress-bar"></div>
      </div>
      <div class="progress-container-details">
        <span id="percent"></span>
        <span id="storage"></span>
      </div>
    </div>
  </section>

  <div class="top-notifications">
    <i class="fa-solid fa-bell"></i>
    <span id="top-notification"></span>
  </div>

  <div id="interface">
    <div class="navigation">
      <div class="notification-container">
        <div class="notification-bell">
          <i class="fa fa-bell"></i>
          <span class="notification-count"></span>
        </div>
        <div class="notification-dropdown">
          <ul class="notification-list"></ul>
        </div>
      </div>
      <div class="profile-settings">
        <% if (userData) { %>
          <img src="<%= userData.profile_image_url %>" alt="" />
          <% } else { %>
            <img src="/images/blank_logo.jpg" alt="../public/images/blank_logo.jpg" />
            <% } %>
              <div class="submenu">
                <a href="#">Sign Out</a>
                <a href="/settings">Settings</a>
              </div>
      </div>
    </div>

    <div class="main-interface">
      <div class="video-interface">
        <div class="clip">
          <video id="video" src="<%= videoData.file %>" controls></video>
          <span id="duration">
            <%= videoData.length %>
          </span>
        </div>
        <div class="video-info">
          <div class="video-img-title">
            <img src="<%= videoData.categoryImg %>" alt="">
            <div>
              <span id="video-category">
                <%= videoData.category %>
              </span>
              <span id="video-date">
                <%= videoData.date %>
              </span>
            </div>
          </div>
          <div class="video-actions">
            <button class="action-button" id="delete-video">
              <i class="fa-solid fa-trash"></i>
            </button>
            <a class="action-button" id="download-video" href="<%= videoData.file %>" download>
              <button class="action-button" id="download-video">
                <i class="fa-solid fa-download"></i>
              </button>
            </a>
            <% if (!videoData.favorite) { %>
              <button class="action-button favorite-button" id="favorite-video">
                <i class="fa-regular fa-heart"></i>
              </button>
              <% } else { %>
                <button class="action-button favorite-button" id="unfavorite-video">
                  <i class="fa-solid fa-heart"></i>
                </button>
                <% } %>
          </div>
        </div>
        <div class="video-tags-container">
          <span>Tags</span>
          <div class="tag-list" id="tag-list">
            <% for (let i=0; i < videoData.tags.length; i++) { %>
              <span>
                <%= videoData.tags[i] %><i class="fa-solid fa-circle-xmark"></i>
              </span>
              <% } %>
          </div>
          <form class="tag-form">
            <input type="text" id="tag-input" placeholder="Add a tag">
          </form>
        </div>
      </div>
    </div>
  </div>
  <script src="/js/base.js"></script>
  <script>
    const urlParams = new URLSearchParams(window.location.search);
    const apiKey = '<%= apiKey %>';
    const tagInput = document.getElementById('tag-input');
    const tagList = document.getElementById('tag-list');
    const videoId = urlParams.get('videoId');
    const favoriteButton = document.querySelector('.favorite-button');
    let isFavorite = <%= videoData.favorite %>;

    favoriteButton.addEventListener('click', () => {
      if (isFavorite) {
        fetch('/api/favorite', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': apiKey
          },
          body: JSON.stringify({
            favoriteType: 'video',
            id: videoId,
            status: false
          })
        })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              favoriteButton.innerHTML = '<i class="fa-regular fa-heart"></i>';
              isFavorite = false;
              console.log(data.message);
            } else {
              console.error(data.error);
            }
          })
          .catch(error => {
            console.error('Error:', error);
          });
      } else {
        fetch('/api/favorite', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': apiKey
          },
          body: JSON.stringify({
            favoriteType: 'video',
            id: videoId,
            status: true
          })
        })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              favoriteButton.innerHTML = '<i class="fa-solid fa-heart favorite"></i>';
              isFavorite = true;
              console.log(data.message);
            } else {
              console.error(data.error);
            }
          })
          .catch(error => {
            console.error('Error:', error);
          });
      }
    });

    function addTagToVideo(event) {
      event.preventDefault();

      const newTag = tagInput.value.trim();

      if (newTag !== '') {
        const tagType = 'video';
        const id = videoId;

        fetch('/api/tags', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': apiKey
          },
          body: JSON.stringify({
            tagType: tagType,
            id: id,
            newTag: newTag
          })
        })
          .then(response => response.json())
          .then(data => {
            console.log(data);
            if (data.success) {
              const tagElement = document.createElement('span');
              const iconElement = document.createElement('i');
              iconElement.classList.add('fa-solid', 'fa-circle-xmark');
              tagElement.textContent = newTag;
              tagElement.appendChild(iconElement);
              tagList.appendChild(tagElement);
              tagInput.value = '';
            }
          })
          .catch(error => {
            console.error('Error adding tag:', error);
          });
      }
    }

    function removeTag(tagElement, tagToRemove) {

      fetch('/api/tags', {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': apiKey
        },
        body: JSON.stringify({
          tagType: 'video',
          id: videoId,
          tagToRemove: tagToRemove
        })
      })
        .then(response => response.json())
        .then(data => {
          console.log(data);
          if (data.success) {
            tagList.removeChild(tagElement);
          }
        })
        .catch(error => {
          console.error('Error removing tag:', error);
        });
    }

    tagList.addEventListener('click', function (event) {
      if (event.target.classList.contains('fa-circle-xmark')) {
        const tagElement = event.target.parentNode;
        const tagToRemove = tagElement.textContent.trim();
        removeTag(tagElement, tagToRemove);
      }
    });

    tagInput.addEventListener('keypress', function (event) {
      if (event.key === 'Enter') {
        addTagToVideo(event);
      }
    });
  </script>
</body>

</html>