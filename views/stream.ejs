<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Clips Vault</title>
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.10.1/css/all.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw=="
    crossorigin="anonymous" referrerpolicy="no-referrer" />
  <link rel="stylesheet" href="/css/base.css">
  <link rel="stylesheet" href="/css/stream.css">
</head>

<body>
  <%- include('menu.ejs') %>
    <div class="stream-container">
      <div class="stream-info-container">
        <img id="stream-image" src="<%= streamData.background_img %>" alt="">
        <div class="stream-info">
          <span class="label">Date:</span>
          <input class="edit-stream-input" id="streamDate" type="date" value="<%= streamData.date %>" disabled>
          <span class="label">Category:</span>
          <input class="edit-stream-input" id="streamCategory" type="text" value="<%= streamData.category %>" disabled>
          <div id="suggestions"></div>
          <% if (streamData.length !== 0) { %>
            <span class="label">Duration:</span>
            <input class="edit-stream-input" id="streamDuration" type="text" value="<%= streamData.length %>" disabled>
          <% } %>
          <!-- <div class="stream-tags">
            <span class="label">Tags</span>
            <div class="tag-list" id="tag-list">
              <% for (let i=0; i < streamData.tags.length; i++) { %>
                <span>
                  <%= streamData.tags[i] %><i class="fa-solid fa-circle-xmark"></i>
                </span>
                <% } %>
            </div>
            <form class="tag-form">
              <input type="text" id="tag-input" placeholder="Add a tag">
            </form>
          </div> -->
          <div class="stream-actions">
            <button class="action-button" id="delete-stream">
              <i class="fa-solid fa-trash"></i>
            </button>
            <button class="action-button" id="download-stream">
              <i class="fa-solid fa-download"></i>
            </button>
            <button class="action-button" id="add-video">
              <i class="fa-solid fa-plus"></i>
            </button>
            <button class="action-button" id="edit-stream">
              <i class="fa-solid fa-pen-to-square"></i>
            </button>
          </div>
          <form action="">
            <h2>Add A Video</h2>
            <div class="form-group upload-area" onclick="document.getElementById('fileUpload').click()">
              <label>Upload Files (Click or Drag and Drop)</label>
              <input type="file" id="fileUpload" name="fileUpload" multiple required style="display: none"
                onchange="displayFiles(this)">
            </div>
            <div class="fileList">
              <span></span>
            </div>
            <button type="submit" class="btn btn-success">Add</button>
          </form>
        </div>
      </div>
      <div class="clips-interface">
        <% for (let i=0; i < videoData.length; i++) { %>
          <a href="/video?streamId=<%= streamData._id %>&videoId=<%= videoData[i]._id %>">
            <div class="clip" data-id="<%= videoData[i]._id %>">
              <div class="video-container">
                <img class="clip-image" src="<%= videoData[i].categoryImg %>" alt="">
                <video src="<%= videoData[i].file %>"></video>
                <span class="clip-duration">
                  <%= videoData[i].length %>
                </span>
              </div>
            </div>
          </a>
          <% } %>
      </div>

    </div>

    <script src="/js/base.js"></script>
    <script>
      const videos = document.querySelectorAll('.clip video');
      const urlParams = new URLSearchParams(window.location.search);
      const streamId = urlParams.get('streamId');
      const deleteStreamButton = document.getElementById('delete-stream');
      const apiKey = '<%= apiKey %>';
      const streamInputs = document.querySelectorAll('.edit-stream-input');
      const editStreamBtn = document.getElementById('edit-stream');
      const addVideoBtn = document.getElementById('add-video');
      let editMode = false;
      let selectedFiles = [];
      let updatedImg = false;

      addVideoBtn.addEventListener('click', () => {
        document.querySelector('form').classList.toggle('show');
      });

      editStreamBtn.addEventListener('click', () => {
        if (editMode) {
          // Exiting edit mode
          streamInputs.forEach(input => {
            input.style.border = 'none';
            input.disabled = true;
            const streamCategory = document.getElementById('streamCategory');
            getBoxArt(streamCategory.value);
            updateStream();
          });
          editStreamBtn.innerHTML = '<i class="fa-solid fa-pen-to-square"></i>';
        } else {
          // Entering edit mode
          streamInputs.forEach(input => {
            input.style.border = 'solid 1px #dadada';
            input.disabled = false;
          });
          editStreamBtn.innerHTML = '<i class="fa-solid fa-check"></i>';
        }
        editMode = !editMode;
      });

      videos.forEach(video => {
        video.addEventListener('mouseenter', () => {
          video.setAttribute('controls', 'controls');
          video.play();
        });

        video.addEventListener('mouseleave', () => {
          video.removeAttribute('controls');
          video.pause();
        });
      });

      function confirmDeleteStream() {
        deleteStreamButton.innerHTML = 'Confirm';
        deleteStreamButton.addEventListener('click', handleConfirm);
        deleteStreamButton.classList.add('confirm-mode');

        confirmationTimer = setTimeout(() => {
          const i = document.createElement('i');
          i.classList.add('fa-solid', 'fa-trash');
          deleteStreamButton.innerHTML = i.outerHTML;
          deleteStreamButton.classList.remove('confirm-mode');
        }, 3000);
      }

      function handleConfirm() {
        console.log('Sending Form');
        fetch(`/api/stream/${streamId}`, {
          method: 'DELETE'
        })
          .then(response => response.json())
          .then(data => {
            console.log(data.success);
            if (data.success === true) {
              window.location.href = '/';
            }
          })
          .catch(error => {
            console.error('Error removing stream:', error);
          });
        const confirmationWindow = document.querySelector('.confirmation-window');
        confirmationWindow.style.display = 'none';
      }
      deleteStreamButton.addEventListener('click', confirmDeleteStream);


      function displayFiles(input) {
        var fileList = document.getElementById('fileList');
        for (var i = 0; i < input.files.length; i++) {
          var fileType = input.files[i].type;
          if (['video/mp4', 'video/x-matroska', 'video/x-msvideo'].includes(fileType)) {
            if (selectedFiles.findIndex(file => file.name === input.files[i].name) === -1) {
              selectedFiles.push(input.files[i]);
              var fileSpan = document.createElement('span');
              fileSpan.textContent = input.files[i].name;
              var closeIcon = document.createElement('i');
              closeIcon.classList.add('fas', 'fa-times-circle');
              closeIcon.addEventListener('click', function (e) {
                const fileName = e.target.parentNode.textContent;
                selectedFiles = selectedFiles.filter(file => file.name !== fileName);
                e.target.parentNode.remove();
              });
              fileSpan.appendChild(closeIcon);
              fileList.appendChild(fileSpan);
            }
          } else {
            alert("Only .mp4, .mkv, and .avi files are accepted.");
          }
        }
      }

      document.querySelector('.upload-area').addEventListener('click', function () {
        document.getElementById('fileUpload').value = "";
      }, false);

      document.querySelector('.upload-area').addEventListener('drop', function (e) {
        e.preventDefault();
        Array.from(e.dataTransfer.files).forEach(file => {
          if (selectedFiles.findIndex(selectedFile => selectedFile.name === file.name) === -1) {
            selectedFiles.push(file);
          }
        });
        displayFiles({ files: selectedFiles });
      }, false);

      document.getElementById('fileUpload').addEventListener('change', function (e) {
        e.preventDefault();
        Array.from(e.target.files).forEach(file => {
          if (selectedFiles.findIndex(selectedFile => selectedFile.name === file.name) === -1) {
            selectedFiles.push(file);
          }
        });
        displayFiles({ files: selectedFiles });
      }, false);

      document.querySelector('form').addEventListener('submit', function (e) {
        e.preventDefault();
        var formData = new FormData();
        formData.append('streamId', streamId);
        selectedFiles.forEach((file, i) => {
          formData.append('fileUpload', file);
        });
        fetch('/api/clip', {
          method: 'POST',
          body: formData
        })
          .then(response => response.json())
          .then(data => {
            console.log('Success:', data);
            if (data.success) {
              window.location.reload();
              selectedFiles = [];
              document.getElementById('fileList').innerHTML = '';
            }
          })
          .catch((error) => {
            console.error('Error:', error);
          });
      });

      // Function to search for game box art from the server
      async function getBoxArt(gameName) {
        if (updatedImg) {
          return;
        };
        console.log(gameName);
        const response = await fetch('/api/categorysearch', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            boxArt: true,
            category: gameName
          })
        })
        if (!response.ok) {
          console.log('Error getting box art');
          return;
        } else {
          updatedImg = true;
          const data = await response.json();
          document.getElementById('stream-image').src = data;
          return data;
        }
      }

      var timeoutId;
      document.getElementById('streamCategory').addEventListener('input', function (e) {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(function () {
          fetch('/api/categorysearch', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              category: e.target.value
            })
          })
            .then(response => response.json())
            .then(data => {
              const gameImg = document.getElementById('catImg');
              var suggestions = document.getElementById('suggestions');
              suggestions.innerHTML = '';
              data.forEach(game => {
                var suggestion = document.createElement('div');
                suggestion.className = "suggestion-item";
                var gameArt = document.createElement('img');
                gameArt.src = game.art;
                gameArt.className = "game-art";
                var gameName = document.createElement('span');
                gameName.textContent = game.name;
                gameName.className = "game-name";
                suggestion.appendChild(gameArt);
                suggestion.appendChild(gameName);
                suggestions.appendChild(suggestion);
                suggestion.addEventListener('click', function () {
                  document.getElementById('streamCategory').value = game.name;
                  suggestions.style.display = 'none';
                });
              });
              if (data.length > 0) {
                suggestions.style.display = 'block';
              }
            })
            .catch(error => console.error('Error:', error));
        }, 500);
      });

      // Function to update stream info
      async function updateStream() {
        const streamCategory = document.getElementById('streamCategory').value;
        const streamDate = document.getElementById('streamDate').value;
        const response = await fetch('/api/stream', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            streamId,
            streamCategory,
            streamDate
          })
        });
        if (!response.ok) {
          console.log('Error updating stream');
          return;
        } else {
          console.log('Success updating stream');
          return;
        }
      }
    </script>
</body>

</html>