<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Clips Vault</title>
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.10.1/css/all.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw=="
    crossorigin="anonymous" referrerpolicy="no-referrer" />
  <link rel="stylesheet" href="/css/base.css">
  <link rel="stylesheet" href="/css/stream.css">
</head>

<body>
  <%- include('menu.ejs') %>
    <div class="stream-container">
      <div class="stream-info-container">
        <img src="<%= streamData.background_img %>" alt="">
        <div class="stream-info">
          <span class="label">Date:</span>
          <h3>
            <%= streamData.date %>
          </h3>
          <span class="label">Category:</span>
          <h3>
            <%= streamData.category %>
          </h3>
          <span class="label">Duration:</span>
          <h3>
            <%= streamData.length %>
          </h3>
          <!-- <div class="stream-tags">
            <span class="label">Tags</span>
            <div class="tag-list" id="tag-list">
              <% for (let i=0; i < streamData.tags.length; i++) { %>
                <span>
                  <%= streamData.tags[i] %><i class="fa-solid fa-circle-xmark"></i>
                </span>
                <% } %>
            </div>
            <form class="tag-form">
              <input type="text" id="tag-input" placeholder="Add a tag">
            </form>
          </div> -->
          <div class="stream-actions">
            <button class="action-button" id="delete-stream">
              <i class="fa-solid fa-trash"></i>
            </button>
            <button class="action-button" id="download-stream">
              <i class="fa-solid fa-download"></i>
            </button>
            <button class="action-button" id="add-video">
              <i class="fa-solid fa-plus"></i>
            </button>
            <button class="action-button" id="add-video">
              <i class="fa-solid fa-pen-to-square"></i>
            </button>
          </div>
        </div>
      </div>
      <div class="clips-interface">
        <% for (let i=0; i < videoData.length; i++) { %>
          <a href="/video?streamId=<%= streamData._id %>&videoId=<%= videoData[i]._id %>">
            <div class="clip" data-id="<%= videoData[i]._id %>">
              <div class="video-container">
                <video src="<%= videoData[i].file %>"></video>
                <span class="clip-duration">
                  <%= videoData[i].length %>
                </span>
              </div>
            </div>
          </a>
          <% } %>
      </div>

    </div>

    <script src="/js/base.js"></script>
    <script>
      const videos = document.querySelectorAll('.clip video');
      const urlParams = new URLSearchParams(window.location.search);
      const streamId = urlParams.get('streamId');
      const deleteStreamButton = document.getElementById('delete-stream');
      const apiKey = '<%= apiKey %>';

      videos.forEach(video => {
        video.addEventListener('mouseenter', () => {
          video.setAttribute('controls', 'controls');
          video.play();
        });

        video.addEventListener('mouseleave', () => {
          video.removeAttribute('controls');
          video.pause();
        });
      });

      function addTagToStream(event) {
        event.preventDefault();

        const tagInput = document.getElementById('tag-input');
        const tagList = document.getElementById('tag-list');
        const newTag = tagInput.value.trim();

        if (newTag !== '') {
          const tagType = 'stream';

          fetch('/api/tags', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'x-api-key': apiKey
            },
            body: JSON.stringify({
              tagType: tagType,
              id: streamId,
              newTag: newTag
            })
          })
            .then(response => response.json())
            .then(data => {
              console.log(data);
              if (data.success) {
                // Tag added successfully, append it to the tag list
                const tagElement = document.createElement('span');
                const iconElement = document.createElement('i');
                iconElement.classList.add('fa-solid', 'fa-circle-xmark');
                tagElement.textContent = newTag;
                tagElement.appendChild(iconElement);
                tagList.appendChild(tagElement);

                // Clear the input field
                tagInput.value = '';
              }
            })
            .catch(error => {
              console.error('Error adding tag:', error);
            });
        }
      }

      const tagInput = document.getElementById('tag-input');
      tagInput.addEventListener('keypress', function (event) {
        if (event.key === 'Enter') {
          addTagToStream(event);
        }
      });


      function removeTag(tagElement, tagType, id, tagToRemove) {
        const tagList = document.getElementById('tag-list');

        fetch('/api/tags', {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            tagType: tagType,
            id: id,
            tagToRemove: tagToRemove
          })
        })
          .then(response => response.json())
          .then(data => {
            console.log(data);
            if (data.success) {
              // Tag removed successfully, remove it from the tag list
              tagList.removeChild(tagElement);
            }
          })
          .catch(error => {
            console.error('Error removing tag:', error);
          });
      }

      const tagList = document.getElementById('tag-list');
      tagList.addEventListener('click', function (event) {
        if (event.target.classList.contains('fa-circle-xmark')) {
          const tagElement = event.target.parentNode;
          const tagType = 'stream'; // Assuming the tag type is 'stream'
          const id = streamId; // Replace with the actual stream ID
          const tagToRemove = tagElement.textContent.trim();

          removeTag(tagElement, tagType, id, tagToRemove);
        }
      });

      function confirmDeleteStream() {
        deleteStreamButton.style.backgroundColor = 'red';
        deleteStreamButton.style.fontSize = '1rem';
        deleteStreamButton.innerHTML = 'Confirm';
        deleteStreamButton.addEventListener('click', handleConfirm);
        deleteStreamButton.classList.add('confirm-mode');

        confirmationTimer = setTimeout(() => {
          deleteStreamButton.style.backgroundColor = '#3f63ff';
          deleteStreamButton.innerHTML = '';
          deleteStreamButton.classList.remove('confirm-mode');
        }, 3000);
      }

      function handleConfirm() {
        console.log('Sending Form');
        fetch(`/api/stream/${streamId}`, {
          method: 'DELETE'
        })
          .then(response => response.json())
          .then(data => {
            console.log(data.success);
            if (data.success === true) {
              window.location.href = '/';
            }
          })
          .catch(error => {
            console.error('Error removing stream:', error);
          });
        const confirmationWindow = document.querySelector('.confirmation-window');
        confirmationWindow.style.display = 'none';
      }
      deleteStreamButton.addEventListener('click', confirmDeleteStream);
    </script>
</body>

</html>